#include <iostream>
using namespace std;

template <typename T>
T add(T a, T b) { return a + b; }

template <typename T>
T subtract(T a, T b) { return a - b; }

template <typename T>
T multiply(T a, T b) { return a * b; }

template <typename T>
T divide(T a, T b) { return b != 0 ? a / b : throw invalid_argument("Division by zero"); }

template <>
float divide(float a, float b) { return b != 0.0f ? a / b : 0.0f; }

template <>
double divide(double a, double b) { return b != 0.0 ? a / b : 0.0; }

template <typename T>
class Calculator {
public:
    T a, b;
    Calculator(T x, T y) : a(x), b(y) {}
    void show() {
        cout << "Add: " << add(a, b) << "\n";
        cout << "Subtract: " << subtract(a, b) << "\n";
        cout << "Multiply: " << multiply(a, b) << "\n";
        try { cout << "Divide: " << divide(a, b) << "\n"; }
        catch (...) { cout << "Divide: Error\n"; }
    }
};

int main() {
    int choice;
    cout << "1.Int 2.Float 3.Double: "; cin >> choice;
    if (choice == 1) {
        int x, y; cin >> x >> y;
        Calculator<int> c(x, y); c.show();
    } else if (choice == 2) {
        float x, y; cin >> x >> y;
        Calculator<float> c(x, y); c.show();
    } else if (choice == 3) {
        double x, y; cin >> x >> y;
        Calculator<double> c(x, y); c.show();
    }
    return 0;
}
